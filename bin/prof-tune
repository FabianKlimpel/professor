#! /usr/bin/env python

"""\
%prog datadir

Interpolate histo bin values as a function of the parameter space by loading
from the usual data directory structure $datadir/mc/{rundirs}

TODO:
 * Remove the demo plotting... maybe move it into another script?
 * Handle weight files/args
 * Handle run combination file/string (write a hash of the run list into the ipol filename?)
 * User choice of MC error interpolation (mean,median,ipol x none,symm,plusminus,full)
"""

import optparse
op = optparse.OptionParser()
# TODO: Remove demo
op.add_option("--ifile", dest="IFILE", default="ipol.dat", help="file into which to write the bin interpolations (default: %default)")
op.add_option("--demo", dest="DEMO", action="store_true", default=False, help="temporary demo mode: plot the sum of bin values as a demo")
# TODO: Add weight file parsing to decide which histos (and bin subsets) to interpolate
opts, args = op.parse_args()

import os, glob
DATADIR = args[0]
indirs = glob.glob(os.path.join(DATADIR, "mc", "*"))

import professor2 as prof
# PARAMS, HISTOS = prof.load_rundata(indirs, opts.PFILE)
# RUNS, PARAMNAMES, PARAMSLIST = prof.mk_ipolinputs(PARAMS)
# del HISTOS

## Read persisted interpolations to re-create the ipol Histos
IHISTOS = {}
with open(opts.IFILE, "r") as f:
    currentib = None
    for line in f:
        sline = line.strip()
        if sline.startswith("/"):
            fullpath, sxmin, sxmax = sline.split()
            hpath, nbin = fullpath.split("#")
            if currentib:
                IHISTOS.setdefault(hpath, prof.Histo()).bins.append(currentib)
            currentib = prof.IpolBin(float(sxmin), float(sxmax))
        elif sline.startswith("val"):
            currentib.ival = prof.Ipol(sline)
        elif sline.startswith("err"):
            currentib.ierr = prof.Ipol(sline)

print IHISTOS


# TODO: REMOVE!
## Plotting demo
if opts.DEMO:
    import numpy as np
    A_X = np.linspace(min(ps[0] for ps in PARAMSLIST), max(ps[0] for ps in PARAMSLIST), 20)
    A_Y = np.linspace(min(ps[1] for ps in PARAMSLIST), max(ps[1] for ps in PARAMSLIST), 20)
    M_X, M_Y = np.meshgrid(A_X, A_Y)
    M_Z = np.zeros(M_X.shape)
    for i in xrange(M_X.shape[0]):
        for j in xrange(M_X.shape[1]):
            for ih in IHISTOS.values():
                for ib in ih.bins:
                    M_Z[i,j] += ib.val([M_X[i,j], M_Y[i,j]]) #< TODO: something better, e.g. a simple chi2
    import matplotlib.pyplot as plt
    from mpl_toolkits.mplot3d import Axes3D
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.plot_wireframe(M_X, M_Y, M_Z, rstride=1, cstride=1)
    plt.show()
