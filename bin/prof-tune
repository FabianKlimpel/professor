#! /usr/bin/env python

"""\
%prog datadir

Interpolate histo bin values as a function of the parameter space by loading
from the usual data directory structure $datadir/mc/{rundirs}

TODO:
 * Remove the demo plotting... maybe move it into another script?
 * Handle weight files/args
 * Handle run combination file/string (write a hash of the run list into the ipol filename?)
 * User choice of MC error interpolation (mean,median,ipol x none,symm,plusminus,full)
"""

import optparse
op = optparse.OptionParser()
# TODO: Remove demo
op.add_option("--ifile", dest="IFILE", default="ipol.dat", help="file into which to write the bin interpolations (default: %default)")
op.add_option("--demo", dest="DEMO", action="store_true", default=False, help="temporary demo mode: plot the sum of bin values as a demo")
op.add_option("--debug", dest="DEBUG", action="store_true", default=False, help="Turn on some debug messages")
op.add_option("--quiet", dest="QUIET", action="store_true", default=False, help="Turn off messages")
# TODO: Add weight file parsing to decide which histos (and bin subsets) to interpolate
opts, args = op.parse_args()
DATADIR = args[0]

## Read persisted interpolations to re-create the ipol Histos
import professor2 as prof

if not opts.QUIET:
    print prof.logo

## Read in meta data
M = prof.read_meta(opts.IFILE)
if not M["DataFormat"] == 'binned':
    print "Error, DataFormat of tuning input is not binned, exiting"
    import sys
    sys.exit(1)

## Read in ipol histos
IHISTOS = prof.read_binnedipol(opts.IFILE)

## List of rivet analysis paths in IHISTOS
ananames = list(set([filter(lambda x:len(x)>1, i.split("/"))[0] for i in IHISTOS.keys()]))

## Read reference data histos
import os, glob
HISTOS = {}
reffiles = glob.glob(os.path.join(DATADIR,  "*"))
for rf in reffiles:
    HISTOS.update(prof.read_histos(rf))

## Find things available in both
available=[]
for i in IHISTOS.keys():
    for r in HISTOS.keys():
        if i in r:
            available.append([i,r])

## Prepare list of ibins and databins --- order should be ok
ibins = []
databins = []
for a in available:
    ibins.extend(  IHISTOS[a[0]].bins)
    databins.extend(HISTOS[a[1]].bins)

## Sanity checks
assert(len(ibins) == len(databins))

if len(ibins)==0:
    print "No bins ..., exiting"
    import sys
    sys,exit(1)

weights=None
def simpleGOF(params):
    """
    Very straight forward gof
    """
    chi2 = 0.0
    for num, ibin in enumerate(ibins):
        ival = ibin.val(params)
        dval = databins[num].val
        if ibin.ierrs is None:
            err2 = databins[num].err**2
        else:
            err2 = sum([e**2 for e in ibin.ierrs])
        if err2 == 0.0:
            err2=1.
            #continue
        w=1
        if weights is not None:
            w=weights[num]
            pass # do stuff
        diff = dval - ival
        chi2 += w * diff**2 / err2
    return chi2


## Take parameter names directly from ifile
mpnames = M["Params"].split()

## Fall back solution if empty
if len(mpnames)==0:
    mpnames = ["MP%03i"%(i) for i in xrange(int(M["Dimension"]))]

## Function definition wrapper
funcdef = prof.mk_fitfunc("simpleGOF", mpnames)
exec funcdef in locals()
if opts.DEBUG:
    print "Built GoF wrapper from:\n  '%s'" % funcdef


## Ignition
from minuit2 import Minuit2 as Minuit
minuit = Minuit(profGoF, strategy=2)

## Starting point --- use center
C= []
for num, m in enumerate(map(float, M["MinV"].split())):
    C.append(m+0.5*(float(M["MinV"].split()[num])-m))
for num, name in enumerate(mpnames):
    minuit.values[name] = C[num]

# TODO:
# * fixed parameters
# * limits
# * steer/check write out of params and ipolhistos

## Lift off
minuit.migrad()

result = [minuit.values[p] for p in mpnames]
rng_low = map(float, M["MinV"].split())
rng_high = map(float, M["MaxV"].split())
rok, rng = prof.is_inrange(result, rng_low, rng_high)



for num, p in enumerate(mpnames):
    if opts.QUIET:
        print "%s\t%f"%(p, minuit.values[p])
    else:
        if rok or not num in rng:
            print "%s\t%f\t%f\t%f per cent   inside  (%f --- %f)"%(p, minuit.values[p], minuit.errors[p], 100*(minuit.errors[p]/minuit.values[p]), rng_low[num], rng_high[num])
        else:
            print "%s\t%f\t%f\t%f per cent   OUTSIDE (%f --- %f)"%(p, minuit.values[p], minuit.errors[p], 100*(minuit.errors[p]/minuit.values[p]), rng_low[num], rng_high[num])


with open("results.dat","w") as f:
    for p in mpnames:
        f.write("%s\t%f\n"%(p, minuit.values[p]))

result = [minuit.values[name] for name in mpnames]
with open("ipolhistos.yoda", "w") as f:
    for num, k in enumerate(sorted(IHISTOS.keys())):
        f.write(IHISTOS[k].toYODA(result, k))
        if num+1 < len(IHISTOS.keys()):
            f.write("\n")
