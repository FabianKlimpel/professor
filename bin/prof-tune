#! /usr/bin/env python

"""\
%prog datadir

Interpolate histo bin values as a function of the parameter space by loading
from the usual data directory structure $datadir/mc/{rundirs}

TODO:
 * Remove the demo plotting... maybe move it into another script?
 * Handle weight files/args
 * Handle run combination file/string (write a hash of the run list into the ipol filename?)
 * User choice of MC error interpolation (mean,median,ipol x none,symm,plusminus,full)
"""

import optparse
op = optparse.OptionParser()
# TODO: Remove demo
op.add_option("--ifile", dest="IFILE", default="ipol.dat", help="file into which to write the bin interpolations (default: %default)")
op.add_option("--demo", dest="DEMO", action="store_true", default=False, help="temporary demo mode: plot the sum of bin values as a demo")
op.add_option("--debug", dest="DEBUG", action="store_true", default=False, help="Turn on some debug messages")
op.add_option("--quiet", dest="QUIET", action="store_true", default=False, help="Turn off messages")
# TODO: Add weight file parsing to decide which histos (and bin subsets) to interpolate
opts, args = op.parse_args()
DATADIR = args[0]

## Read persisted interpolations to re-create the ipol Histos
import professor2 as prof

if not opts.QUIET:
    print prof.logo

M = prof.read_meta(opts.IFILE)
if not M["DataFormat"] == 'binned':
    print "Error, DataFormat of tuning input is not binned, exiting"
    import sys
    sys.exit(1)


IHISTOS = prof.read_binnedipol(opts.IFILE)
#with open(opts.IFILE, "r") as f:
    #currentib = None
    #for line in f:
        #sline = line.strip()
        #if sline.startswith("/"):
            #fullpath, sxmin, sxmax = sline.split()
            #hpath, nbin = fullpath.split("#")
            #if currentib:
                #IHISTOS.setdefault(hpath, prof.Histo()).bins.append(currentib)
            #currentib = prof.IpolBin(float(sxmin), float(sxmax))
        #elif sline.startswith("val"):
            #currentib.ival = prof.Ipol(sline)
        #elif sline.startswith("err"):
            #currentib.ierr = prof.Ipol(sline)
# print IHISTOS


## Rivet analyses in IHISTOS
ananames = list(set([filter(lambda x:len(x)>1, i.split("/"))[0] for i in IHISTOS.keys()]))


## Read reference data histos
import os, glob
HISTOS = {}
reffiles = glob.glob(os.path.join(DATADIR,  "*"))
for rf in reffiles:
    HISTOS.update(prof.read_histos(rf))

# Find things available in both
available=[]
for i in IHISTOS.keys():
    for r in HISTOS.keys():
        if i in r:
            available.append([i,r])


ibins = []
databins = []
for a in available:
    ibins.extend(  IHISTOS[a[0]].bins)
    databins.extend(HISTOS[a[1]].bins)

assert(len(ibins) == len(databins))

if len(ibins)==0:
    print "No bins ..., exiting"
    import sys
    sys,exit(1)

def simplechi2(params, weights=None):
    chi2 = 0.0
    for num, ibin in enumerate(ibins):
        ival = ibin.val(params)
        dval = databins[num].val
        if ibin.ierrs is None:
            err2 = databins[num].err**2
        else:
            err2 = sum([e**2 for e in ibin.ierrs])
        if err2 == 0.0:
            err2=1.
            #continue
        w=1
        if weights is not None:
            w=weights[num]
            pass # do stuff
        diff = dval - ival
        chi2 += w * diff**2 / err2
    return chi2

from minuit2 import Minuit2 as Minuit

# Take parameter names directly from ifile
mpnames = M["Params"].split()
# Fall back if empty
if len(mpnames)==0:
    mpnames = ["MP%03i"%(i) for i in xrange(int(M["Dimension"]))]

# Function definition wrapper
funcdef = prof.mk_fitfunc("simplechi2", mpnames)
exec funcdef in locals()
if opts.DEBUG:
    print "Built GoF wrapper from:\n  '%s'" % funcdef



minuit = Minuit(profGoF, strategy=2)
# TODO:
# * fixed parameters
# * limits

# Starting point --- use center
C= []
for num, m in enumerate(map(float, M["MinV"].split())):
    C.append(m+0.5*(float(M["MinV"].split()[num])-m))
for num, name in enumerate(mpnames):
    minuit.values[name] = C[num]

## Fixed
#minuit.fixed["CSS_IS_AS_FAC"] = True
#minuit.fixed["CSS_FS_AS_FAC"] = True
#minuit.fixed["CSS_FS_PT2MIN"] = True
#minuit.fixed["CSS_IS_PT2MIN"] = True
#minuit.fixed["PROFILE_1"] = True
#minuit.fixed["PROFILE_2"] = True
#minuit.fixed["SCALE_MIN"] = True
#minuit.fixed["SIGMA_ND_FACTOR"] = True
#minuit.fixed["TURNOFF"] = True

# Ignition
minuit.migrad()

for p in mpnames:
    print "%s\t%f\t%f\t%f per cent"%(p, minuit.values[p], minuit.errors[p], 100*(minuit.errors[p]/minuit.values[p]))

#from IPython import embed
#embed()

