#! /usr/bin/env python

"""\
%prog <param1,param2,param3> [<ipolfile>=ipol.dat]

Write out interpolated histograms at a given parameter point.

TODO:
 * Support a param point file argument
"""

import optparse, os, sys
op = optparse.OptionParser(usage=__doc__)
op.add_option("--prefix", "--output", dest="OUTPUT", default="prof2", help="Prefix for outputs (default: %default)")
op.add_option("-v", "--debug", dest="DEBUG", action="store_true", default=False, help="Turn on some debug messages")
op.add_option("-q", "--quiet", dest="QUIET", action="store_true", default=False, help="Turn off messages")
# TODO: Add weight file parsing to decide which histos (and bin subsets) to interpolate
opts, args = op.parse_args()

## Get mandatory arguments
if len(args) < 1:
    print "Argument missing... exiting\n\n"
    op.print_usage()
    sys.exit(1)
PARAMSTR = args[0]
IFILE = "ipol.dat"
if len(args) >= 2:
    IFILE = args[1]


import professor2 as prof
if not opts.QUIET:
    print prof.logo

## Read ipol param names and histos
META, IHISTOS = prof.read_ipolhistos(IFILE)
PNAMES = META["ParamNames"].split()


## Parse the param point argument
PARAMS = None
if "=" not in PARAMSTR:
    PARAMS = [float(x) for x in PARAMSTR.split(",")]
else:
    pdict = dict([x.split("=", 1) for x in PARAMSTR.split(",")])
    PARAMS = [float(pdict[p]) for p in PNAMES]
# if os.path.exists(args[0]):
#     with open(args[0]) as f:
#         PARAMS = [float(l.strip().split()[-1]) for l in f if not l.startswith("#")]


## Write out ipolhistos
ofile = opts.OUTPUT + "_prediction.yoda"
print "Writing predicted histograms to", ofile
with open(ofile, "w") as f:
    for num, k in enumerate(sorted(IHISTOS.keys())):
        f.write(IHISTOS[k].toDataHisto(PARAMS).toYODAStr(k))
        if num+1 < len(IHISTOS.keys()):
            f.write("\n")
