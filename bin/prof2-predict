#! /usr/bin/env python

"""\
%prog datadir

Write out yoda file at parampoint P

TODO:
    * stuff
"""

import optparse
op = optparse.OptionParser(usage=__doc__)
op.add_option("--ifile", dest="IFILE", default="ipol.dat", help="File from which to read the bin interpolations (default: %default)")
op.add_option("--output", dest="OUTPUT", default="tuned", help="Prefix for outputs (default: %default)")
op.add_option("--debug", dest="DEBUG", action="store_true", default=False, help="Turn on some debug messages")
op.add_option("--quiet", dest="QUIET", action="store_true", default=False, help="Turn off messages")
# TODO: Add weight file parsing to decide which histos (and bin subsets) to interpolate
opts, args = op.parse_args()

## Read persisted interpolations to re-create the ipol Histos
import professor2 as prof

if not opts.QUIET:
    print prof.logo

import os, sys
if not os.path.exists(opts.IFILE):
    print "Error: specified interpolation file %s not found, exiting."%opts.IFILE
    sys.exit(1)

## Read in meta data
M = prof.read_meta(opts.IFILE)
if not M["DataFormat"] == 'binned':
    print "Error, DataFormat of tuning input is not binned, exiting"
    import sys
    sys.exit(1)

## Read in ipol histos
IHISTOS = prof.read_binnedipol(opts.IFILE)


## This is the Parameter point bit
if len(args)==1:
    try:
        P=map(float, args[0].split(","))
    except:
        pass
    try:
        import os
        if os.path.exists(args[0]):
            with open(args[0]) as f:
                P=[float(l.strip().split()[-1]) for l in f if not l.startswith("#")]
    except:
        pass
else:
    P=map(float, args)



## Write out ipolhistos
with open("%s_prediction.yoda"%opts.OUTPUT, "w") as f:
    for num, k in enumerate(sorted(IHISTOS.keys())):
        f.write(IHISTOS[k].toYODA(P, k))
        if num+1 < len(IHISTOS.keys()):
            f.write("\n")
