#! /usr/bin/env python

"""\
%prog datadir

Interpolate histo bin values as a function of the parameter space by loading
from the usual data directory structure $datadir/mc/{rundirs}

TODO:
 * Handle weight files/args
 * Handle run combination file/string (write a hash of the run list into the ipol filename?)
 * User choice of MC error interpolation (mean,median,ipol x none,symm,plusminus,full)
"""

import optparse
op = optparse.OptionParser()
# TODO: Remove demo
op.add_option("--pfile", dest="PFILE", default="params.dat", help="name of the params file to be found in each run directory (default: %default)")
op.add_option("--ifile", dest="IFILE", default="ipol.dat", help="file into which to write the bin interpolations (default: %default)")
op.add_option("--ierr",  dest="IERR", default="none", help="whether to interpolate MC errors (none, symm, ...)")
op.add_option("--info",  dest="INFO", default=None, help="Info string to be written to output file")
op.add_option("--order", dest="ORDER", default=3, type=int, help="Global order of polynomials for interpolation")
op.add_option("--debug", dest="DEBUG", action="store_true", default=False, help="Turn on some debug messages")
op.add_option("--quiet", dest="QUIET", action="store_true", default=False, help="Turn off messages")
op.add_option("--multi", dest="MULTI", action="store_true", default=False, help="Run in multiprocessing mode")
op.add_option("--rebin", dest="REBIN", help="Rebin", default=1, type=int)
# TODO: Add weight file parsing to decide which histos (and bin subsets) to interpolate
opts, args = op.parse_args()

import os, glob, sys
if len(args)==1:
    DATADIR = args[0]
elif len(args)==2:
    DATADIR = os.path.join(args[0], args[1])
else:
    print "Error: invalid command line, exiting."
    sys.exit(1)

indirs = glob.glob(os.path.join(DATADIR, "*"))


import professor2 as prof
if not opts.QUIET:
    print prof.logo

PARAMS, HISTOS = prof.load_rundata(indirs, opts.PFILE, opts.DEBUG, rebin=opts.REBIN)
RUNS, PARAMNAMES, PARAMSLIST = prof.mk_ipolinputs(PARAMS)


HNAMES = HISTOS.keys()


# Robustness
bad = []
badnum = []
for num, run in enumerate(RUNS):
    for h in HNAMES:
        if not HISTOS[h].has_key(run):
            bad.append(run)
            badnum.append(num)
            break

if len(bad)>0:
    print "Found %i bad runs in %i total"%(len(bad), len(RUNS))
    print "Cleansing"
    goodr, goodp = [], []
    for num, run in enumerate(RUNS):
        if not num in badnum:
            goodr.append(run)
            goodp.append(PARAMSLIST[num])

    RUNS = goodr
    PARAMSLIST = goodp
    print "Cleansed"



IHISTOS = {}


import time, zlib
# The worker
#from memory_profiler import profile
#@profile
def worker(q, rdict):
    while True:
        if q.empty():
            break
        hn=q.get()
        histos = HISTOS[hn]
        ih = prof.mk_ipolhisto(histos, RUNS, PARAMSLIST, opts.ORDER, opts.IERR)
        del HISTOS[hn] #< pro-actively clear up memory
        s=""
        for i, ib in enumerate(ih.bins):
            s += "%s#%d %.5e %.5e\n" % (hn, i, ib.xmin, ib.xmax)
            s += "  " + ib.ival.toString("val") + "\n"
            if ib.ierrs:
                s += "  " + ib.ierrs.toString("err") + "\n"
        del ih #< pro-actively clear up memory
        rdict[hn]=zlib.compress(s,9) # Save some memory
        del s
        del histos

time1 = time.time()

print "\n\nInterpolating\n"
import multiprocessing
num_cores = multiprocessing.cpu_count()
if num_cores > 1 and opts.MULTI:
    ## A shared memory object is required for retrieval coefficients
    from multiprocessing import Manager
    manager = Manager()
    tempDict = manager.dict()

    ## The job queue
    q=multiprocessing.Queue()
    map(lambda x:q.put(x), HNAMES)

    ## Fire away
    workers = [multiprocessing.Process(target=worker, args=(q, tempDict)) for i in range(num_cores)]
    map(lambda x:x.start(), workers)
    map(lambda x:x.join(),  workers)

    ## Finally copy the result dictionary into the object itself
    for k in tempDict.keys():
        IHISTOS[k] = tempDict[k]
else:
    for num, hn in enumerate(HNAMES):
        if opts.DEBUG:
            print "\n\nInterpolating " + hn
        else:
            print "\r%.1f per cent interpolated"%((float(num+1)/len(HNAMES))*100),
        histos = HISTOS[hn]
        print hn
        IHISTOS[hn] = prof.mk_ipolhisto(histos, RUNS, PARAMSLIST, opts.ORDER, opts.IERR)
        del HISTOS[hn] #< pro-actively clear up memory
del HISTOS #< more memory clean-up


time2 = time.time()
print '\nInterpolation took %0.2f s'%((time2-time1))


## Write out meta info
with open(opts.IFILE, "w") as f:
    if opts.INFO is not None:
        f.write("Info: %s\n"%opts.INFO)
    f.write("DataDir: %s\n"%DATADIR)
    f.write("ProfVersion: %s\n"%prof.mk_versionstring())
    f.write("Date: %s\n"%prof.mk_timestamp())
    f.write("DataFormat: binned\n") # That tells the reader how to treat the coefficients that follow
    # Format and write out parameter names
    pstring = "Params:"
    for p in PARAMNAMES:
        pstring+=" %s"%p
    f.write(pstring+"\n")
    # Dimension (consistency check)
    f.write("Dimension: %i\n"%len(PARAMNAMES))
    # Interpolation validity (hypercube edges)
    minstring = "MinV:"
    for v in prof.mk_minvals(PARAMSLIST):
        minstring+=" %f"%v
    f.write(minstring+"\n")
    maxstring = "MaxV:"
    for v in prof.mk_maxvals(PARAMSLIST):
        maxstring+=" %f"%v
    f.write(maxstring+"\n")
    # Number of inputs per bin
    f.write("NInputs: %i\n"%len(PARAMSLIST))
    f.write("# End of header\n---\n")


## Write out interpolation persistency info
s = ""
for hname in sorted(IHISTOS.keys()):
    ih = IHISTOS[hname]
    if type(ih)==str: ## detect results from multiprocessing
        s+=zlib.decompress(ih)
    else:
        for i, ib in enumerate(ih.bins):
            s += "%s#%d %.5e %.5e\n" % (hname, i, ib.xmin, ib.xmax)
            s += "  " + ib.ival.toString("val") + "\n"
            if ib.ierrs:
                s += "  " + ib.ierrs.toString("err") + "\n"
# Open file for write/append
with open(opts.IFILE, "a") as f:
    f.write(s)

print "\nOutput written to %s"%opts.IFILE


with open("bad", "w") as f:
    for b in bad:
        f.write("%s\n"%b)
