#! /usr/bin/env python

import optparse
op = optparse.OptionParser()
opts, args = op.parse_args()

import os, glob
INDIR = args[0]
indirs = glob.glob(os.path.join(INDIR, "mc", "*"))

import professor2 as prof
PARAMS, HISTOS = prof.load_rundata(indirs)
RUNS, PARAMNAMES, PARAMSLIST = mk_ipolinputs(PARAMS)
# print RUNS
# print PARAMNAMES
# print PARAMSLIST
HNAMES = HISTOS.keys()
IHISTOS = {}
for hn in HNAMES:
    print "Interpolating " + hn
    histos = HISTOS[hn]
    IHISTOS[hn] = mk_ipolhisto(histos, RUNS, PARAMSLIST, 3)
    del HISTOS[hn] #< pro-actively clear up memory
del HISTOS #< more memory clean-up
# print sum(len(h.bins) for h in IHISTOS.values())

## Write out interpolation persistency info
# TODO: Write this to file... how to read it back into IpolHistos again?
for hname, ih in IHISTOS.iteritems():
    for i, ib in enumerate(ih.bins):
        print ib.ival.toString("%s:$d" % (hname, i))
        if ib.ierr:
            print ib.ierr.toString("%s[err]:%d" % (hname, i))


import numpy as np
A_X = np.linspace(min(ps[0] for ps in PARAMSLIST), max(ps[0] for ps in PARAMSLIST), 20)
A_Y = np.linspace(min(ps[1] for ps in PARAMSLIST), max(ps[1] for ps in PARAMSLIST), 20)
M_X, M_Y = np.meshgrid(A_X, A_Y)
M_Z = np.zeros(M_X.shape)
ih = IHISTOS.values()[0] #< TODO: remove one-histo hack
for i in xrange(M_X.shape[0]):
    for j in xrange(M_X.shape[1]):
        for ib in ih.bins:
            M_Z[i,j] += ib.val([M_X[i,j], M_Y[i,j]]) #< TODO: something better, e.g. a simple chi2

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
# ax.scatter(X1, Y1, Z1, c="r")
ax.plot_wireframe(M_X, M_Y, M_Z, rstride=1, cstride=1)
plt.show()
