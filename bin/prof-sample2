#! /usr/bin/env python

# TODO: offer hier and flat options for structuring resulting files
# TODO: handle weighting via SymPy expresssions: solve(Eq(y, sympify("log(x+3)")), x)[0] ; f = lambdify(y, e)
# TODO: also accept range file as input

import optparse
op = optparse.OptionParser()
op.add_option("-n", dest="NUMPOINTS", metavar="NUM", type=int, default=100, help="number of samples to generate [default=%default]")
op.add_option("-t", dest="TEMPLATES", metavar="FILE", action="append", default=[], help="specify a template file to be populated for each sample point. Can be given multiple times")
opts, args = op.parse_args()

try:
    from collections import OrderedDict
except:
    from ordereddict import OrderedDict

import os
TEMPLATES = {}
for tname in opts.TEMPLATES:
    base, ext = os.path.splitext(ob.path.basename(tname))
    with open(tname, "r") as f:
        TEMPLATES[(base,ext)] = f.read()

import random
for n in xrange(opts.NUMPOINTS):
    npad = "{run:04d}".format(run=n)

    ## Populate params dictionary
    params = OrderedDict()
    for a in args:
        name, low, high = a.split("/")
        val = random.uniform(float(low), float(high))
        params[name] = val

    ## Write params file unless told otherwise
    with open("params-" + npad + ".dat", "w") as pf: #< TODO: or use hier scheme
        for k, v in params.iteritems():
            pf.write("{name} {val:e}\n".format(name=k, val=v))

    ## Instantiate template(s)
    params["N"] = npad
    for (base, ext), tmpl in TEMPLATES.iteritems():
        txt = tmpl.format(**params)
        with open("scan-" + base + "-" + npad + ext, "w") as tf: #< TODO: or use hier scheme
            tf.write(txt)
