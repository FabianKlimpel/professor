#!/usr/bin/env python

"""%prog [options] <samplingfile>

Sample from a parameter space defined by a set of ranges,
conditions and functions.
Write the results to used_params files in a sub-directory tree.
"""
import argparse

from professor.tools import log as logging

parser = argparse.ArgumentParser(description='Sample N points from samplingfile, dump points as text files')
parser.add_argument('samplingfile', type=str,
                   help='File with sampling instructions')
parser.add_argument('-N', dest='N',  type=int,
                   help='The number of points to sample')
parser.add_argument('-o', dest='OUTDIR',  default="mc",
                   help='Output folder')
parser.add_argument('-s', dest='SEED',  default="31415926",
                   help='Random seed')

args = parser.parse_args()


def readSamplingFile(fname):
    """ Read ranges, functions and conditions from file <fname>.
        Return three lists
    """
    # Prepare return values
    ranges, functions, conditions = [], [], []
    # Open file for reading
    with open(fname) as f:
        for line in f:
            # Discard white spaces and beginning and end of each line
            l = line.strip()
            # Ignore empty lines and those commented out with #
            if len(l) > 0 and not l.startswith("#"):
                # Split the line string at white spaces into a list
                cmd = l.split()
                # Check for keywords
                if cmd[0] == "prof_C":
                    conditions.append(cmd[1])
                elif cmd[0] == "prof_F":
                    functions.append(cmd[1:3])
                # Normal ranges
                else:
                    ranges.append(cmd)
    return ranges, functions, conditions

# Set up the sampling generator
import generator
gc = generator.ConditionalRandomGenerator(args.SEED)
rng, fnc, cnd = readSamplingFile(args.samplingfile)
map(lambda x:gc.addRange(*x), rng)
map(lambda x:gc.addFunction(*x), fnc)
map(lambda x:gc.addCondition(x), cnd)

# Generate points
ppoints=[i for i in gc.generate(args.N)]

# Some cosmetics for the subdirectory naming scheme
from math import ceil, log10
n_leadingzeros = int(ceil(log10(len(ppoints))))

# Write parameter points to files
for num, p in enumerate(ppoints):
    from os.path import join
    outfile = join(args.OUTDIR, str(num).zfill(n_leadingzeros), "used_params")
    p.writeParamFile(outfile)

logging.info("Generated %i parameter points from file %s. \nOutput written to folder %s."%(args.N, args.samplingfile, args.OUTDIR))
